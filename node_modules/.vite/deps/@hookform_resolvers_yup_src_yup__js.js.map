{
  "version": 3,
  "sources": ["../../@hookform/resolvers/src/validateFieldsNatively.ts", "../../@hookform/resolvers/src/toNestErrors.ts", "../../@hookform/resolvers/yup/src/yup.ts"],
  "sourcesContent": ["import {\n  get,\n  FieldError,\n  ResolverOptions,\n  Ref,\n  FieldErrors,\n  FieldValues,\n} from 'react-hook-form';\n\nconst setCustomValidity = (\n  ref: Ref,\n  fieldPath: string,\n  errors: FieldErrors,\n) => {\n  if (ref && 'reportValidity' in ref) {\n    const error = get(errors, fieldPath) as FieldError | undefined;\n    ref.setCustomValidity((error && error.message) || '');\n\n    ref.reportValidity();\n  }\n};\n\n// Native validation (web only)\nexport const validateFieldsNatively = <TFieldValues extends FieldValues>(\n  errors: FieldErrors,\n  options: ResolverOptions<TFieldValues>,\n): void => {\n  for (const fieldPath in options.fields) {\n    const field = options.fields[fieldPath];\n    if (field && field.ref && 'reportValidity' in field.ref) {\n      setCustomValidity(field.ref, fieldPath, errors);\n    } else if (field.refs) {\n      field.refs.forEach((ref: HTMLInputElement) =>\n        setCustomValidity(ref, fieldPath, errors),\n      );\n    }\n  }\n};\n", "import {\n  get,\n  FieldErrors,\n  Field,\n  ResolverOptions,\n  FieldValues,\n  InternalFieldName,\n} from 'react-hook-form';\nimport { validateFieldsNatively } from './validateFieldsNatively';\n\nexport const isDateObject = (value: unknown): value is Date => value instanceof Date;\n\nexport const isNullOrUndefined = (value: unknown): value is null | undefined => value == null;\n\nexport const isObjectType = (value: unknown): value is object =>\n  typeof value === 'object';\n\nexport const isObject = <T extends object>(value: unknown): value is T =>\n  !isNullOrUndefined(value) &&\n  !Array.isArray(value) &&\n  isObjectType(value) &&\n  !isDateObject(value);\n\nexport const isKey = (value: string) => /^\\w*$/.test(value);\n\nconst compact = <TValue>(value: TValue[]) =>\n  Array.isArray(value) ? value.filter(Boolean) : [];\n\nconst stringToPath = (input: string): string[] =>\n  compact(input.replace(/[\"|']|\\]/g, '').split(/\\.|\\[/));\n\nconst set = (object: FieldValues, path: string, value?: unknown) => {\n  let index = -1;\n  const tempPath = isKey(path) ? [path] : stringToPath(path);\n  const length = tempPath.length;\n  const lastIndex = length - 1;\n\n  while (++index < length) {\n    const key = tempPath[index];\n    let newValue = value;\n\n    if (index !== lastIndex) {\n      const objValue = object[key];\n      newValue =\n        isObject(objValue) || Array.isArray(objValue)\n          ? objValue\n          : !isNaN(+tempPath[index + 1])\n            ? []\n            : {};\n    }\n    object[key] = newValue;\n    object = object[key];\n  }\n  return object;\n};\n\n\nexport const toNestErrors = <TFieldValues extends FieldValues>(\n  errors: FieldErrors,\n  options: ResolverOptions<TFieldValues>,\n): FieldErrors<TFieldValues> => {\n  options.shouldUseNativeValidation && validateFieldsNatively(errors, options);\n\n  const fieldErrors = {} as FieldErrors<TFieldValues>;\n  for (const path in errors) {\n    const field = get(options.fields, path) as Field['_f'] | undefined;\n    const error = Object.assign(errors[path] || {}, {\n      ref: field && field.ref,\n    });\n\n    if (isNameInFieldArray(options.names || Object.keys(errors), path)) {\n      const fieldArrayErrors = Object.assign({}, get(fieldErrors, path));\n\n      set(fieldArrayErrors, 'root', error);\n      set(fieldErrors, path, fieldArrayErrors);\n    } else {\n      set(fieldErrors, path, error);\n    }\n  }\n\n  return fieldErrors;\n};\n\nconst isNameInFieldArray = (\n  names: InternalFieldName[],\n  name: InternalFieldName,\n) => names.some((n) => n.startsWith(name + '.'));\n", "import * as Yup from 'yup';\nimport { toNestErrors, validateFieldsNatively } from '@hookform/resolvers';\nimport {\n  appendErrors,\n  FieldError,\n  FieldValues,\n  Resolver,\n} from 'react-hook-form';\n\n/**\n * Why `path!` ? because it could be `undefined` in some case\n * https://github.com/jquense/yup#validationerrorerrors-string--arraystring-value-any-path-string\n */\nconst parseErrorSchema = (\n  error: Yup.ValidationError,\n  validateAllFieldCriteria: boolean,\n) => {\n  return (error.inner || []).reduce<Record<string, FieldError>>(\n    (previous, error) => {\n      if (!previous[error.path!]) {\n        previous[error.path!] = { message: error.message, type: error.type! };\n      }\n\n      if (validateAllFieldCriteria) {\n        const types = previous[error.path!].types;\n        const messages = types && types[error.type!];\n\n        previous[error.path!] = appendErrors(\n          error.path!,\n          validateAllFieldCriteria,\n          previous,\n          error.type!,\n          messages\n            ? ([] as string[]).concat(messages as string[], error.message)\n            : error.message,\n        ) as FieldError;\n      }\n\n      return previous;\n    },\n    {},\n  );\n};\n\nexport function yupResolver<TFieldValues extends FieldValues>(\n  schema:\n    | Yup.ObjectSchema<TFieldValues>\n    | ReturnType<typeof Yup.lazy<Yup.ObjectSchema<TFieldValues>>>,\n  schemaOptions: Parameters<(typeof schema)['validate']>[1] = {},\n  resolverOptions: {\n    /**\n     * @default async\n     */\n    mode?: 'async' | 'sync';\n    /**\n     * Return the raw input values rather than the parsed values.\n     * @default false\n     */\n    raw?: boolean;\n  } = {},\n): Resolver<Yup.InferType<typeof schema>> {\n  return async (values, context, options) => {\n    try {\n      if (schemaOptions.context && process.env.NODE_ENV === 'development') {\n        // eslint-disable-next-line no-console\n        console.warn(\n          \"You should not used the yup options context. Please, use the 'useForm' context object instead\",\n        );\n      }\n\n      const result = await schema[\n        resolverOptions.mode === 'sync' ? 'validateSync' : 'validate'\n      ](\n        values,\n        Object.assign({ abortEarly: false }, schemaOptions, { context }),\n      );\n\n      options.shouldUseNativeValidation && validateFieldsNatively({}, options);\n\n      return {\n        values: resolverOptions.raw ? values : result,\n        errors: {},\n      };\n    } catch (e: any) {\n      if (!e.inner) {\n        throw e;\n      }\n\n      return {\n        values: {},\n        errors: toNestErrors(\n          parseErrorSchema(\n            e,\n            !options.shouldUseNativeValidation &&\n              options.criteriaMode === 'all',\n          ),\n          options,\n        ),\n      };\n    }\n  };\n}\n"],
  "mappings": "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",
  "names": ["setCustomValidity", "ref", "fieldPath", "errors", "error", "get", "message", "reportValidity", "validateFieldsNatively", "options", "_loop", "field", "fields", "refs", "forEach", "isDateObject", "value", "Date", "isNullOrUndefined", "isObjectType", "isObject", "Array", "isArray", "isKey", "test", "set", "object", "path", "index", "tempPath", "input", "replace", "split", "filter", "Boolean", "length", "lastIndex", "key", "newValue", "objValue", "isNaN", "toNestErrors", "shouldUseNativeValidation", "fieldErrors", "Object", "assign", "isNameInFieldArray", "names", "keys", "fieldArrayErrors", "name", "some", "n", "startsWith", "error", "e"]
}
